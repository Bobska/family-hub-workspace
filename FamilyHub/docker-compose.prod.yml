version: '3.8'

# Production Docker Compose configuration
# Optimized for production deployment with Nginx, Gunicorn, and security

services:
  # Production Web Service with Gunicorn
  web:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      - DEBUG=False
      - SECRET_KEY=${SECRET_KEY}
      - DATABASE_URL=postgresql://familyhub_user:${POSTGRES_PASSWORD}@postgres:5432/familyhub
      - REDIS_URL=redis://redis:6379/0
      - ALLOWED_HOSTS=${ALLOWED_HOSTS:-familyhub.local}
      - DJANGO_SETTINGS_MODULE=FamilyHub.settings.production
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    expose:
      - "8000"
    command: >
      sh -c "wait-for-it.sh postgres:5432 --timeout=60 --strict -- 
             python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             gunicorn --bind 0.0.0.0:8000 --workers 3 --timeout 120 --max-requests 1000 --max-requests-jitter 100 FamilyHub.wsgi:application"
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Nginx Reverse Proxy
  nginx:
    build:
      context: .
      dockerfile: nginx/Dockerfile
    container_name: familyhub_nginx
    volumes:
      - static_volume:/var/www/html/static
      - media_volume:/var/www/html/media
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - web
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Production Redis with password
  redis:
    image: redis:7-alpine
    container_name: familyhub_redis_prod
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis123} --appendonly yes
    volumes:
      - redis_data:/data
    expose:
      - "6379"
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # PostgreSQL with production optimizations
  postgres:
    image: postgres:17.6-alpine
    container_name: familyhub_postgres_prod
    environment:
      POSTGRES_DB: familyhub
      POSTGRES_USER: familyhub_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST_AUTH_METHOD: scram-sha-256
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    expose:
      - "5432"
    command: [
      "postgres",
      "-c", "shared_buffers=2GB",
      "-c", "max_connections=200",
      "-c", "effective_cache_size=4GB",
      "-c", "maintenance_work_mem=256MB",
      "-c", "checkpoint_completion_target=0.9",
      "-c", "wal_buffers=64MB",
      "-c", "default_statistics_target=100",
      "-c", "random_page_cost=1.1",
      "-c", "effective_io_concurrency=200",
      "-c", "work_mem=16MB",
      "-c", "log_min_duration_statement=1000"
    ]
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 3G
        reservations:
          memory: 2G

  # Backup service
  backup:
    image: postgres:17.6-alpine
    container_name: familyhub_backup
    environment:
      PGPASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh
    command: sh -c "chmod +x /backup.sh && crond -f"
    depends_on:
      - postgres
    restart: unless-stopped
    profiles:
      - backup
