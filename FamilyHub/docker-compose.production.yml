version: '3.8'

# Complete Local Production Stack for FamilyHub
# 5 core services + backup service with internal networking and health checks

services:
  # Django Web Application with Gunicorn
  web:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: familyhub_web_prod
    environment:
      - DEBUG=False
      - SECRET_KEY=${SECRET_KEY}
      - POSTGRES_DB=${POSTGRES_DB:-familyhub}
      - POSTGRES_USER=${POSTGRES_USER:-familyhub_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - ALLOWED_HOSTS=${ALLOWED_HOSTS:-familyhub.local,localhost}
      - DJANGO_SETTINGS_MODULE=FamilyHub.settings.production
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
      - logs_volume:/app/logs
    expose:
      - "8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: >
      sh -c "wait-for-it.sh postgres:5432 --timeout=60 --strict -- 
             python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             gunicorn --bind 0.0.0.0:8000 
                      --workers 3 
                      --worker-class gevent 
                      --worker-connections 1000
                      --timeout 120 
                      --max-requests 1000 
                      --max-requests-jitter 100 
                      --preload
                      --access-logfile - 
                      --error-logfile - 
                      FamilyHub.wsgi:application"
    restart: always
    networks:
      - familyhub_internal
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # Celery Worker for Async Tasks
  celery:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: familyhub_celery_prod
    environment:
      - DEBUG=False
      - SECRET_KEY=${SECRET_KEY}
      - POSTGRES_DB=${POSTGRES_DB:-familyhub}
      - POSTGRES_USER=${POSTGRES_USER:-familyhub_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - DJANGO_SETTINGS_MODULE=FamilyHub.settings.production
    volumes:
      - media_volume:/app/media
      - logs_volume:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: >
      sh -c "wait-for-it.sh postgres:5432 --timeout=60 --strict --
             wait-for-it.sh redis:6379 --timeout=60 --strict --
             celery -A FamilyHub worker 
                    --loglevel=info 
                    --concurrency=2
                    --max-tasks-per-child=1000"
    restart: always
    networks:
      - familyhub_internal
    healthcheck:
      test: ["CMD", "celery", "-A", "FamilyHub", "inspect", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Celery Beat Scheduler
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: familyhub_celery_beat_prod
    environment:
      - DEBUG=False
      - SECRET_KEY=${SECRET_KEY}
      - POSTGRES_DB=${POSTGRES_DB:-familyhub}
      - POSTGRES_USER=${POSTGRES_USER:-familyhub_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - DJANGO_SETTINGS_MODULE=FamilyHub.settings.production
    volumes:
      - logs_volume:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: >
      sh -c "wait-for-it.sh postgres:5432 --timeout=60 --strict --
             wait-for-it.sh redis:6379 --timeout=60 --strict --
             celery -A FamilyHub beat 
                    --loglevel=info
                    --scheduler=django_celery_beat.schedulers:DatabaseScheduler"
    restart: always
    networks:
      - familyhub_internal
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'

  # PostgreSQL Database with Production Optimizations
  postgres:
    image: postgres:17.6-alpine
    container_name: familyhub_postgres_prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-familyhub}
      POSTGRES_USER: ${POSTGRES_USER:-familyhub_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./postgres-data:/backups
    expose:
      - "5432"
    command: [
      "postgres",
      "-c", "shared_buffers=2GB",
      "-c", "max_connections=200",
      "-c", "effective_cache_size=4GB",
      "-c", "maintenance_work_mem=256MB",
      "-c", "checkpoint_completion_target=0.9",
      "-c", "wal_buffers=64MB",
      "-c", "default_statistics_target=100",
      "-c", "random_page_cost=1.1",
      "-c", "effective_io_concurrency=200",
      "-c", "work_mem=16MB",
      "-c", "huge_pages=off",
      "-c", "min_wal_size=1GB",
      "-c", "max_wal_size=4GB",
      "-c", "log_min_duration_statement=1000",
      "-c", "log_checkpoints=on",
      "-c", "log_connections=on",
      "-c", "log_disconnections=on",
      "-c", "log_lock_waits=on"
    ]
    restart: always
    networks:
      - familyhub_internal
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-familyhub_user} -d ${POSTGRES_DB:-familyhub}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 3G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'

  # Redis Cache and Message Broker
  redis:
    image: redis:7-alpine
    container_name: familyhub_redis_prod
    command: >
      redis-server 
      --requirepass ${REDIS_PASSWORD:-redis123}
      --appendonly yes
      --appendfsync everysec
      --auto-aof-rewrite-percentage 100
      --auto-aof-rewrite-min-size 64mb
      --maxmemory 1gb
      --maxmemory-policy allkeys-lru
      --tcp-keepalive 60
      --timeout 300
    volumes:
      - redis_data:/data
    expose:
      - "6379"
    restart: always
    networks:
      - familyhub_internal
    healthcheck:
      test: ["CMD", "redis-cli", "--pass", "${REDIS_PASSWORD:-redis123}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Nginx Reverse Proxy and Static File Server
  nginx:
    build:
      context: .
      dockerfile: nginx/Dockerfile
    container_name: familyhub_nginx_prod
    environment:
      - NGINX_WORKER_PROCESSES=auto
      - NGINX_WORKER_CONNECTIONS=1024
    volumes:
      - static_volume:/var/www/html/static:ro
      - media_volume:/var/www/html/media:ro
      - logs_volume:/var/log/nginx
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - web
    restart: always
    networks:
      - familyhub_internal
      - familyhub_external
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'

  # Database Backup Service
  backup:
    image: eeshugerman/postgres-backup-s3:15
    container_name: familyhub_backup_prod
    environment:
      SCHEDULE: "0 2 * * *"  # Daily at 2 AM
      BACKUP_KEEP_DAYS: 7
      BACKUP_KEEP_WEEKS: 4
      BACKUP_KEEP_MONTHS: 6
      HEALTHCHECK_PORT: 8080
      POSTGRES_HOST: postgres
      POSTGRES_DB: ${POSTGRES_DB:-familyhub}
      POSTGRES_USER: ${POSTGRES_USER:-familyhub_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_EXTRA_OPTS: "--schema=public --blobs"
      # S3 Configuration (optional - remove if using local storage)
      # S3_REGION: us-west-1
      # S3_ACCESS_KEY_ID: ${S3_ACCESS_KEY_ID}
      # S3_SECRET_ACCESS_KEY: ${S3_SECRET_ACCESS_KEY}
      # S3_BUCKET: familyhub-backups
      # S3_PREFIX: production
    volumes:
      - ./backups:/backups
    depends_on:
      postgres:
        condition: service_healthy
    restart: always
    networks:
      - familyhub_internal
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'

  # Redis Monitoring (optional)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: familyhub_redis_commander
    environment:
      - REDIS_HOSTS=local:redis:6379:1:${REDIS_PASSWORD:-redis123}
      - HTTP_USER=admin
      - HTTP_PASSWORD=${REDIS_COMMANDER_PASSWORD:-admin123}
    ports:
      - "8082:8081"
    depends_on:
      - redis
    restart: always
    networks:
      - familyhub_internal
    profiles:
      - monitoring
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.25'

# Docker Networks
networks:
  familyhub_internal:
    driver: bridge
    internal: true
    ipam:
      config:
        - subnet: 172.20.0.0/16
  familyhub_external:
    driver: bridge

# Docker Volumes
volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/postgres
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/redis
  static_volume:
    driver: local
  media_volume:
    driver: local
  logs_volume:
    driver: local

# Production deployment settings
x-deploy-settings: &deploy-settings
  restart_policy:
    condition: on-failure
    delay: 5s
    max_attempts: 3
    window: 120s
  update_config:
    parallelism: 1
    delay: 10s
    failure_action: rollback
    monitor: 60s
    max_failure_ratio: 0.3
