# FamilyHub Production Docker Management Makefile

.PHONY: help build up down restart logs shell migrate collectstatic backup restore health

# Default environment file
ENV_FILE ?= .env.production

# Docker Compose files
COMPOSE_FILES = -f docker-compose.yml -f docker-compose.production.yml

help: ## Show this help message
	@echo "FamilyHub Production Docker Commands"
	@echo "===================================="
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m%-20s\033[0m %s\n", $$1, $$2}'

build: ## Build all Docker images
	@echo "üèóÔ∏è  Building production images..."
	docker-compose $(COMPOSE_FILES) --env-file $(ENV_FILE) build --no-cache

up: ## Start all services in production mode
	@echo "üöÄ Starting FamilyHub production stack..."
	docker-compose $(COMPOSE_FILES) --env-file $(ENV_FILE) up -d
	@echo "‚úÖ Production stack started!"
	@echo "üåê Web: https://localhost"
	@echo "üìä Redis Commander: http://localhost:8082 (with monitoring profile)"

down: ## Stop all services
	@echo "üõë Stopping FamilyHub production stack..."
	docker-compose $(COMPOSE_FILES) --env-file $(ENV_FILE) down
	@echo "‚úÖ All services stopped"

stop: ## Stop services without removing containers
	@echo "‚è∏Ô∏è  Stopping services..."
	docker-compose $(COMPOSE_FILES) --env-file $(ENV_FILE) stop

start: ## Start existing containers
	@echo "‚ñ∂Ô∏è  Starting services..."
	docker-compose $(COMPOSE_FILES) --env-file $(ENV_FILE) start

restart: ## Restart all services
	@echo "üîÑ Restarting production stack..."
	docker-compose $(COMPOSE_FILES) --env-file $(ENV_FILE) restart
	@echo "‚úÖ Services restarted"

logs: ## Show logs from all services
	docker-compose $(COMPOSE_FILES) --env-file $(ENV_FILE) logs -f

logs-web: ## Show Django web logs
	docker-compose $(COMPOSE_FILES) --env-file $(ENV_FILE) logs -f web

logs-nginx: ## Show Nginx logs
	docker-compose $(COMPOSE_FILES) --env-file $(ENV_FILE) logs -f nginx

logs-postgres: ## Show PostgreSQL logs
	docker-compose $(COMPOSE_FILES) --env-file $(ENV_FILE) logs -f postgres

logs-redis: ## Show Redis logs
	docker-compose $(COMPOSE_FILES) --env-file $(ENV_FILE) logs -f redis

logs-celery: ## Show Celery worker logs
	docker-compose $(COMPOSE_FILES) --env-file $(ENV_FILE) logs -f celery

logs-backup: ## Show backup service logs
	docker-compose $(COMPOSE_FILES) --env-file $(ENV_FILE) logs -f backup

shell: ## Access Django shell
	docker-compose $(COMPOSE_FILES) --env-file $(ENV_FILE) exec web python manage.py shell

bash: ## Access web container bash
	docker-compose $(COMPOSE_FILES) --env-file $(ENV_FILE) exec web bash

psql: ## Access PostgreSQL shell
	docker-compose $(COMPOSE_FILES) --env-file $(ENV_FILE) exec postgres psql -U familyhub_user -d familyhub

redis-cli: ## Access Redis CLI
	docker-compose $(COMPOSE_FILES) --env-file $(ENV_FILE) exec redis redis-cli

migrate: ## Run Django migrations
	@echo "üîÑ Running database migrations..."
	docker-compose $(COMPOSE_FILES) --env-file $(ENV_FILE) exec web python manage.py migrate
	@echo "‚úÖ Migrations completed"

makemigrations: ## Create Django migrations
	@echo "üìù Creating migrations..."
	docker-compose $(COMPOSE_FILES) --env-file $(ENV_FILE) exec web python manage.py makemigrations
	@echo "‚úÖ Migrations created"

collectstatic: ## Collect static files
	@echo "üì¶ Collecting static files..."
	docker-compose $(COMPOSE_FILES) --env-file $(ENV_FILE) exec web python manage.py collectstatic --noinput
	@echo "‚úÖ Static files collected"

createsuperuser: ## Create Django superuser
	@echo "üë§ Creating superuser..."
	docker-compose $(COMPOSE_FILES) --env-file $(ENV_FILE) exec web python manage.py createsuperuser

health: ## Check health of all services
	@echo "üè• Checking service health..."
	@echo "Web Service:"
	@curl -f http://localhost/health/ 2>/dev/null && echo "‚úÖ Web: Healthy" || echo "‚ùå Web: Unhealthy"
	@echo "Database Service:"
	@docker-compose $(COMPOSE_FILES) --env-file $(ENV_FILE) exec postgres pg_isready -U familyhub_user -d familyhub >/dev/null 2>&1 && echo "‚úÖ Database: Healthy" || echo "‚ùå Database: Unhealthy"
	@echo "Redis Service:"
	@docker-compose $(COMPOSE_FILES) --env-file $(ENV_FILE) exec redis redis-cli ping >/dev/null 2>&1 && echo "‚úÖ Redis: Healthy" || echo "‚ùå Redis: Unhealthy"
	@echo "Celery Worker:"
	@docker-compose $(COMPOSE_FILES) --env-file $(ENV_FILE) exec celery celery -A FamilyHub inspect ping >/dev/null 2>&1 && echo "‚úÖ Celery: Healthy" || echo "‚ùå Celery: Unhealthy"

ps: ## Show running containers
	docker-compose $(COMPOSE_FILES) --env-file $(ENV_FILE) ps

stats: ## Show container resource usage
	docker stats $$(docker-compose $(COMPOSE_FILES) --env-file $(ENV_FILE) ps -q)

backup: ## Create database backup
	@echo "üíæ Creating database backup..."
	docker-compose $(COMPOSE_FILES) --env-file $(ENV_FILE) exec backup /backup.sh
	@echo "‚úÖ Backup completed"

backup-now: ## Force immediate backup
	@echo "üíæ Creating immediate backup..."
	@TIMESTAMP=$$(date +%Y%m%d_%H%M%S) && \
	docker-compose $(COMPOSE_FILES) --env-file $(ENV_FILE) exec postgres pg_dump -U familyhub_user -d familyhub > ./backups/familyhub_backup_$$TIMESTAMP.sql
	@echo "‚úÖ Backup saved to ./backups/"

restore: ## Restore from backup (requires BACKUP_FILE variable)
ifndef BACKUP_FILE
	@echo "‚ùå Please specify BACKUP_FILE=path/to/backup.sql"
	@exit 1
endif
	@echo "üîÑ Restoring from backup: $(BACKUP_FILE)"
	docker-compose $(COMPOSE_FILES) --env-file $(ENV_FILE) exec -T postgres psql -U familyhub_user -d familyhub < $(BACKUP_FILE)
	@echo "‚úÖ Restore completed"

clean: ## Remove all containers, volumes, and images
	@echo "üßπ Cleaning up Docker resources..."
	docker-compose $(COMPOSE_FILES) --env-file $(ENV_FILE) down -v --rmi all
	docker system prune -f
	@echo "‚úÖ Cleanup completed"

reset: ## Reset entire environment (DANGEROUS - removes all data)
	@echo "‚ö†Ô∏è  WARNING: This will remove ALL data!"
	@read -p "Are you sure? Type 'yes' to continue: " confirm && [ "$$confirm" = "yes" ] || exit 1
	@echo "üîÑ Resetting environment..."
	docker-compose $(COMPOSE_FILES) --env-file $(ENV_FILE) down -v
	docker volume prune -f
	rm -rf ./data/postgres/* ./data/redis/*
	@echo "‚úÖ Environment reset completed"

update: ## Update and restart services
	@echo "üîÑ Updating production stack..."
	docker-compose $(COMPOSE_FILES) --env-file $(ENV_FILE) pull
	$(MAKE) build
	$(MAKE) down
	$(MAKE) up
	@echo "‚úÖ Update completed"

monitoring: ## Start with monitoring services
	@echo "üìä Starting with monitoring..."
	docker-compose $(COMPOSE_FILES) --env-file $(ENV_FILE) --profile monitoring up -d

# Development helpers
dev-setup: ## Setup development environment
	@echo "üõ†Ô∏è  Setting up development environment..."
	cp .env.production .env
	@echo "‚úÖ Please edit .env file with your settings"

dev-test: ## Run tests in container
	@echo "üß™ Running tests..."
	docker-compose $(COMPOSE_FILES) --env-file $(ENV_FILE) exec web python manage.py test

# Security
security-scan: ## Run security scan on images
	@echo "üîí Running security scan..."
	docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
		-v $(PWD):/src aquasec/trivy fs /src

# Documentation
docs: ## Generate documentation
	@echo "üìñ Available commands:"
	@$(MAKE) help
