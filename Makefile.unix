# üöÄ FamilyHub Makefile - Linux/Mac Version
# Author: FamilyHub Team  
# Date: August 29, 2025
# Version: 1.0.0

# ===================================================================
# üéØ QUICK REFERENCE
# ===================================================================
# make help          - Show all available commands
# make dev           - Start development environment  
# make prod          - Start production environment
# make quick         - Start quick PostgreSQL setup (5 minutes)
# make build         - Rebuild all containers
# make migrate       - Run Django migrations
# make shell         - Open Django shell
# make dbshell       - Open PostgreSQL shell
# make test          - Run tests
# make backup        - Backup database
# make restore       - Restore database
# make logs          - View logs
# make stop          - Stop all containers
# ===================================================================

# Shell and colors for Linux/Mac
SHELL := /bin/bash
.SHELLFLAGS := -c

# Colors for output
CYAN = \033[0;36m
GREEN = \033[0;32m
YELLOW = \033[1;33m
RED = \033[0;31m
BLUE = \033[0;34m
NC = \033[0m # No Color

# Project configuration
PROJECT_NAME = familyhub
COMPOSE_DEV = docker-compose -f docker-compose.dev.yml
COMPOSE_PROD = docker-compose -f docker-compose.production.yml
COMPOSE_QUICK = docker-compose -f docker-compose.quick.yml --env-file .env.quick
DJANGO_SERVICE = django
POSTGRES_SERVICE = postgres-dev
BACKUP_DIR = backups
TIMESTAMP = $(shell date +%Y%m%d_%H%M%S)

# Default target
.DEFAULT_GOAL := help

# ===================================================================
# üìã HELP & INFORMATION
# ===================================================================

.PHONY: help
help: ## üìã Show this help message
	@echo -e "$(CYAN)üöÄ FamilyHub Development Workflow Commands$(NC)"
	@echo -e "$(CYAN)===========================================$(NC)"
	@echo ""
	@echo -e "$(BLUE)üöÄ Quick Start:$(NC)"
	@echo "  make quick         ‚ö° Start quick PostgreSQL setup (5 minutes)"
	@echo "  make dev           üèóÔ∏è  Start development environment"
	@echo "  make prod          üè≠ Start production environment"
	@echo ""
	@echo -e "$(BLUE)üîß Development:$(NC)"
	@echo "  make build         üî® Rebuild all containers"
	@echo "  make migrate       üìä Run Django migrations"
	@echo "  make shell         üêç Open Django shell"
	@echo "  make dbshell       üêò Open PostgreSQL shell"
	@echo "  make test          üß™ Run tests"
	@echo ""
	@echo -e "$(BLUE)üìä Database:$(NC)"
	@echo "  make backup        üíæ Backup database"
	@echo "  make restore       üì• Restore database from backup"
	@echo "  make reset-db      üóëÔ∏è  Reset database (WARNING: Deletes all data)"
	@echo ""
	@echo -e "$(BLUE)üîç Monitoring:$(NC)"
	@echo "  make logs          üìã View all service logs"
	@echo "  make logs-django   üìã View Django logs only"
	@echo "  make logs-postgres üìã View PostgreSQL logs only"
	@echo "  make status        üìä Show service status"
	@echo ""
	@echo -e "$(BLUE)üõë Control:$(NC)"
	@echo "  make stop          üõë Stop all containers"
	@echo "  make restart       üîÑ Restart all services"
	@echo "  make clean         üßπ Clean up containers and volumes"
	@echo ""
	@echo -e "$(BLUE)üîß Utilities:$(NC)"
	@echo "  make health        üíö Check application health"
	@echo "  make setup         üéØ Initial project setup"
	@echo "  make update        üì¶ Update dependencies"

# ===================================================================
# üöÄ ENVIRONMENT STARTUP
# ===================================================================

.PHONY: quick
quick: ## ‚ö° Start quick PostgreSQL setup (5 minutes)
	@echo -e "$(CYAN)‚ö° Starting Quick PostgreSQL Environment...$(NC)"
	@if [ -f "quick-postgres-setup.sh" ]; then \
		chmod +x quick-postgres-setup.sh && ./quick-postgres-setup.sh; \
	else \
		$(COMPOSE_QUICK) up -d; \
		sleep 10; \
		echo -e "$(GREEN)‚úÖ Quick PostgreSQL environment started!$(NC)"; \
		echo -e "$(BLUE)üåê pgAdmin: http://localhost:5050$(NC)"; \
		echo -e "$(BLUE)üêò PostgreSQL: localhost:5432$(NC)"; \
	fi

.PHONY: dev
dev: ## üèóÔ∏è Start development environment
	@echo -e "$(CYAN)üèóÔ∏è Starting Development Environment...$(NC)"
	@if [ -f "docker-compose.dev.yml" ]; then \
		$(COMPOSE_DEV) up -d; \
		sleep 15; \
		echo -e "$(GREEN)‚úÖ Development environment started!$(NC)"; \
		echo -e "$(BLUE)üåê Django: http://localhost:8000$(NC)"; \
		echo -e "$(BLUE)üìä pgAdmin: http://localhost:5050$(NC)"; \
	else \
		echo -e "$(RED)‚ùå docker-compose.dev.yml not found$(NC)"; \
		echo -e "$(YELLOW)üí° Use 'make quick' for immediate PostgreSQL setup$(NC)"; \
	fi

.PHONY: prod
prod: ## üè≠ Start production environment
	@echo -e "$(CYAN)üè≠ Starting Production Environment...$(NC)"
	@if [ -f "docker-compose.production.yml" ]; then \
		$(COMPOSE_PROD) up -d; \
		sleep 30; \
		echo -e "$(GREEN)‚úÖ Production environment started!$(NC)"; \
		echo -e "$(BLUE)üåê Application: https://localhost$(NC)"; \
		echo -e "$(BLUE)üìä Monitoring: Check 'make logs' for status$(NC)"; \
	else \
		echo -e "$(RED)‚ùå docker-compose.production.yml not found$(NC)"; \
		echo -e "$(YELLOW)üí° Use 'make quick' for immediate PostgreSQL setup$(NC)"; \
	fi

# ===================================================================
# üîß DEVELOPMENT COMMANDS
# ===================================================================

.PHONY: build
build: ## üî® Rebuild all containers
	@echo -e "$(CYAN)üî® Rebuilding All Containers...$(NC)"
	@if [ -f "docker-compose.dev.yml" ]; then \
		$(COMPOSE_DEV) build --no-cache; \
		echo -e "$(GREEN)‚úÖ Development containers rebuilt!$(NC)"; \
	fi
	@if [ -f "docker-compose.production.yml" ]; then \
		$(COMPOSE_PROD) build --no-cache; \
		echo -e "$(GREEN)‚úÖ Production containers rebuilt!$(NC)"; \
	fi
	@$(COMPOSE_QUICK) build --no-cache
	@echo -e "$(GREEN)‚úÖ All containers rebuilt successfully!$(NC)"

.PHONY: migrate
migrate: ## üìä Run Django migrations
	@echo -e "$(CYAN)üìä Running Django Migrations...$(NC)"
	@if [ $$(docker ps --format "{{.Names}}" | grep -c "$(PROJECT_NAME).*django") -gt 0 ]; then \
		docker-compose exec $(DJANGO_SERVICE) python manage.py makemigrations; \
		docker-compose exec $(DJANGO_SERVICE) python manage.py migrate; \
		echo -e "$(GREEN)‚úÖ Migrations completed!$(NC)"; \
	else \
		echo -e "$(YELLOW)‚ö†Ô∏è  Django container not running. Starting quick environment...$(NC)"; \
		$(MAKE) quick; \
		sleep 10; \
		cd FamilyHub; \
		python manage.py makemigrations; \
		python manage.py migrate; \
		echo -e "$(GREEN)‚úÖ Migrations completed locally!$(NC)"; \
	fi

.PHONY: shell
shell: ## üêç Open Django shell
	@echo -e "$(CYAN)üêç Opening Django Shell...$(NC)"
	@if [ $$(docker ps --format "{{.Names}}" | grep -c "$(PROJECT_NAME).*django") -gt 0 ]; then \
		docker-compose exec $(DJANGO_SERVICE) python manage.py shell; \
	else \
		echo -e "$(YELLOW)‚ö†Ô∏è  Django container not running. Using local environment...$(NC)"; \
		cd FamilyHub && python manage.py shell; \
	fi

.PHONY: dbshell
dbshell: ## üêò Open PostgreSQL shell
	@echo -e "$(CYAN)üêò Opening PostgreSQL Shell...$(NC)"
	@if [ $$(docker ps --format "{{.Names}}" | grep -c "$(PROJECT_NAME).*postgres") -gt 0 ]; then \
		$(COMPOSE_QUICK) exec $(POSTGRES_SERVICE) psql -U django -d familyhub; \
	else \
		echo -e "$(YELLOW)‚ö†Ô∏è  PostgreSQL container not running. Starting quick environment...$(NC)"; \
		$(MAKE) quick; \
		sleep 10; \
		$(COMPOSE_QUICK) exec $(POSTGRES_SERVICE) psql -U django -d familyhub; \
	fi

.PHONY: test
test: ## üß™ Run tests
	@echo -e "$(CYAN)üß™ Running Tests...$(NC)"
	@if [ $$(docker ps --format "{{.Names}}" | grep -c "$(PROJECT_NAME).*django") -gt 0 ]; then \
		docker-compose exec $(DJANGO_SERVICE) python manage.py test; \
	else \
		echo -e "$(YELLOW)‚ö†Ô∏è  Django container not running. Running tests locally...$(NC)"; \
		cd FamilyHub && python manage.py test; \
	fi
	@echo -e "$(GREEN)‚úÖ Tests completed!$(NC)"

# ===================================================================
# üìä DATABASE MANAGEMENT
# ===================================================================

.PHONY: backup
backup: ## üíæ Backup database
	@echo -e "$(CYAN)üíæ Creating Database Backup...$(NC)"
	@mkdir -p $(BACKUP_DIR)
	@if [ $$(docker ps --format "{{.Names}}" | grep -c "$(PROJECT_NAME).*postgres") -gt 0 ]; then \
		docker-compose exec -T $(POSTGRES_SERVICE) pg_dump -U django -d familyhub > "$(BACKUP_DIR)/backup_$(TIMESTAMP).sql"; \
		echo -e "$(GREEN)‚úÖ Database backup created: $(BACKUP_DIR)/backup_$(TIMESTAMP).sql$(NC)"; \
	else \
		echo -e "$(RED)‚ùå PostgreSQL container not running$(NC)"; \
		echo -e "$(YELLOW)üí° Start environment first: make quick$(NC)"; \
	fi

.PHONY: restore
restore: ## üì• Restore database from backup
	@echo -e "$(CYAN)üì• Restoring Database from Backup...$(NC)"
	@if [ ! -d "$(BACKUP_DIR)" ]; then \
		echo -e "$(RED)‚ùå Backup directory not found$(NC)"; \
		exit 1; \
	fi
	@LATEST=$$(ls -t $(BACKUP_DIR)/*.sql 2>/dev/null | head -1); \
	if [ -n "$$LATEST" ]; then \
		echo -e "$(YELLOW)üìÇ Using latest backup: $$(basename $$LATEST)$(NC)"; \
		if [ $$(docker ps --format "{{.Names}}" | grep -c "$(PROJECT_NAME).*postgres") -gt 0 ]; then \
			cat "$$LATEST" | docker-compose exec -T $(POSTGRES_SERVICE) psql -U django -d familyhub; \
			echo -e "$(GREEN)‚úÖ Database restored from: $$(basename $$LATEST)$(NC)"; \
		else \
			echo -e "$(RED)‚ùå PostgreSQL container not running$(NC)"; \
		fi; \
	else \
		echo -e "$(RED)‚ùå No backup files found in $(BACKUP_DIR)$(NC)"; \
	fi

.PHONY: reset-db
reset-db: ## üóëÔ∏è Reset database (WARNING: Deletes all data)
	@echo -e "$(RED)‚ö†Ô∏è  WARNING: This will delete ALL database data!$(NC)"
	@read -p "Type 'YES' to confirm database reset: " confirm; \
	if [ "$$confirm" = "YES" ]; then \
		echo -e "$(CYAN)üóëÔ∏è  Resetting Database...$(NC)"; \
		$(COMPOSE_QUICK) down -v; \
		$(COMPOSE_QUICK) up -d; \
		sleep 15; \
		$(MAKE) migrate; \
		echo -e "$(GREEN)‚úÖ Database reset completed!$(NC)"; \
	else \
		echo -e "$(YELLOW)‚ùå Database reset cancelled$(NC)"; \
	fi

# ===================================================================
# üîç MONITORING & LOGS
# ===================================================================

.PHONY: logs
logs: ## üìã View all service logs
	@echo -e "$(CYAN)üìã Viewing All Service Logs...$(NC)"
	@if [ $$(docker ps --format "{{.Names}}" | grep -c "$(PROJECT_NAME)") -gt 0 ]; then \
		docker-compose logs -f; \
	else \
		echo -e "$(YELLOW)‚ö†Ô∏è  No containers running$(NC)"; \
		echo -e "$(BLUE)üí° Start environment: make quick | make dev | make prod$(NC)"; \
	fi

.PHONY: logs-django
logs-django: ## üìã View Django logs only
	@echo -e "$(CYAN)üìã Viewing Django Logs...$(NC)"
	@if [ $$(docker ps --format "{{.Names}}" | grep -c "$(PROJECT_NAME).*django") -gt 0 ]; then \
		docker-compose logs -f $(DJANGO_SERVICE); \
	else \
		echo -e "$(YELLOW)‚ö†Ô∏è  Django container not running$(NC)"; \
	fi

.PHONY: logs-postgres
logs-postgres: ## üìã View PostgreSQL logs only
	@echo -e "$(CYAN)üìã Viewing PostgreSQL Logs...$(NC)"
	@if [ $$(docker ps --format "{{.Names}}" | grep -c "$(PROJECT_NAME).*postgres") -gt 0 ]; then \
		$(COMPOSE_QUICK) logs -f $(POSTGRES_SERVICE); \
	else \
		echo -e "$(YELLOW)‚ö†Ô∏è  PostgreSQL container not running$(NC)"; \
	fi

.PHONY: status
status: ## üìä Show service status
	@echo -e "$(CYAN)üìä Service Status:$(NC)"
	@echo -e "$(CYAN)==================$(NC)"
	@docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" --filter "name=$(PROJECT_NAME)"
	@echo ""
	@echo -e "$(BLUE)üêò PostgreSQL Connection Test:$(NC)"
	@if [ $$(docker ps --format "{{.Names}}" | grep -c "$(PROJECT_NAME).*postgres") -gt 0 ]; then \
		if $(COMPOSE_QUICK) exec -T $(POSTGRES_SERVICE) pg_isready -U django -d familyhub >/dev/null 2>&1; then \
			echo -e "$(GREEN)‚úÖ PostgreSQL: Connected$(NC)"; \
		else \
			echo -e "$(RED)‚ùå PostgreSQL: Connection failed$(NC)"; \
		fi; \
	else \
		echo -e "$(YELLOW)‚ö†Ô∏è  PostgreSQL: Not running$(NC)"; \
	fi

# ===================================================================
# üõë CONTROL COMMANDS
# ===================================================================

.PHONY: stop
stop: ## üõë Stop all containers
	@echo -e "$(CYAN)üõë Stopping All Containers...$(NC)"
	@if [ -f "docker-compose.dev.yml" ]; then $(COMPOSE_DEV) down >/dev/null 2>&1; fi
	@if [ -f "docker-compose.production.yml" ]; then $(COMPOSE_PROD) down >/dev/null 2>&1; fi
	@$(COMPOSE_QUICK) down >/dev/null 2>&1
	@echo -e "$(GREEN)‚úÖ All containers stopped!$(NC)"

.PHONY: restart
restart: ## üîÑ Restart all services
	@echo -e "$(CYAN)üîÑ Restarting All Services...$(NC)"
	@$(MAKE) stop
	@sleep 5
	@$(MAKE) quick
	@echo -e "$(GREEN)‚úÖ Services restarted!$(NC)"

.PHONY: clean
clean: ## üßπ Clean up containers and volumes
	@echo -e "$(RED)üßπ Cleaning Up Containers and Volumes...$(NC)"
	@read -p "This will remove all containers and volumes. Type 'YES' to confirm: " confirm; \
	if [ "$$confirm" = "YES" ]; then \
		docker-compose down -v --remove-orphans; \
		docker system prune -f; \
		echo -e "$(GREEN)‚úÖ Cleanup completed!$(NC)"; \
	else \
		echo -e "$(YELLOW)‚ùå Cleanup cancelled$(NC)"; \
	fi

# ===================================================================
# üîß UTILITY COMMANDS
# ===================================================================

.PHONY: health
health: ## üíö Check application health
	@echo -e "$(CYAN)üíö Checking Application Health...$(NC)"
	@echo -e "$(CYAN)==================================$(NC)"
	@echo ""
	@echo -e "$(BLUE)üêò PostgreSQL Health:$(NC)"
	@if [ $$(docker ps --format "{{.Names}}" | grep -c "$(PROJECT_NAME).*postgres") -gt 0 ]; then \
		if $(COMPOSE_QUICK) exec -T $(POSTGRES_SERVICE) pg_isready -U django -d familyhub >/dev/null 2>&1; then \
			echo -e "$(GREEN)‚úÖ PostgreSQL: Healthy$(NC)"; \
		else \
			echo -e "$(RED)‚ùå PostgreSQL: Unhealthy$(NC)"; \
		fi; \
	else \
		echo -e "$(YELLOW)‚ö†Ô∏è  PostgreSQL: Not running$(NC)"; \
	fi
	@echo ""
	@echo -e "$(BLUE)üåê Web Services:$(NC)"
	@if curl -s http://localhost:5050 >/dev/null 2>&1; then \
		echo -e "$(GREEN)‚úÖ pgAdmin: Healthy (http://localhost:5050)$(NC)"; \
	else \
		echo -e "$(YELLOW)‚ö†Ô∏è  pgAdmin: Not accessible$(NC)"; \
	fi
	@if curl -s http://localhost:8000 >/dev/null 2>&1; then \
		echo -e "$(GREEN)‚úÖ Django: Healthy (http://localhost:8000)$(NC)"; \
	else \
		echo -e "$(YELLOW)‚ö†Ô∏è  Django: Not accessible$(NC)"; \
	fi

.PHONY: setup
setup: ## üéØ Initial project setup
	@echo -e "$(CYAN)üéØ Setting Up FamilyHub Project...$(NC)"
	@echo -e "$(CYAN)==================================$(NC)"
	@echo -e "$(BLUE)üìã Checking Prerequisites...$(NC)"
	@if ! command -v docker &> /dev/null; then \
		echo -e "$(RED)‚ùå Docker not found. Please install Docker first.$(NC)"; \
		exit 1; \
	fi
	@if ! command -v docker-compose &> /dev/null; then \
		echo -e "$(RED)‚ùå Docker Compose not found. Please install Docker Compose first.$(NC)"; \
		exit 1; \
	fi
	@echo -e "$(GREEN)‚úÖ Prerequisites check passed!$(NC)"
	@echo ""
	@echo -e "$(BLUE)üöÄ Starting Quick PostgreSQL Environment...$(NC)"
	@$(MAKE) quick
	@echo ""
	@echo -e "$(BLUE)üìä Running Initial Migrations...$(NC)"
	@$(MAKE) migrate
	@echo ""
	@echo -e "$(GREEN)üéâ FamilyHub setup completed!$(NC)"
	@echo -e "$(CYAN)üåê Access pgAdmin: http://localhost:5050$(NC)"
	@echo -e "$(CYAN)üêò PostgreSQL: localhost:5432$(NC)"

.PHONY: update
update: ## üì¶ Update dependencies
	@echo -e "$(CYAN)üì¶ Updating Dependencies...$(NC)"
	@$(MAKE) build
	@if [ -f "requirements/development.txt" ]; then \
		cd FamilyHub && pip install -r ../requirements/development.txt; \
		echo -e "$(GREEN)‚úÖ Dependencies updated!$(NC)"; \
	fi

# ===================================================================
# üéØ DEVELOPMENT SHORTCUTS
# ===================================================================

.PHONY: quick-dev
quick-dev: quick migrate ## ‚ö° Quick development setup (PostgreSQL + migrations)
	@echo -e "$(GREEN)üéâ Quick development environment ready!$(NC)"
	@echo -e "$(BLUE)üåê pgAdmin: http://localhost:5050$(NC)"
	@echo -e "$(BLUE)üêò PostgreSQL: localhost:5432$(NC)"
	@echo -e "$(BLUE)üîó DATABASE_URL: postgresql://django:secretpass@localhost:5432/familyhub$(NC)"

.PHONY: fresh-start
fresh-start: clean setup ## üîÑ Fresh project start (clean + setup)
	@echo -e "$(GREEN)üéâ Fresh FamilyHub environment ready!$(NC)"

.PHONY: dev-tools
dev-tools: ## üõ†Ô∏è Show development tools and URLs
	@echo -e "$(CYAN)üõ†Ô∏è  FamilyHub Development Tools$(NC)"
	@echo -e "$(CYAN)==============================$(NC)"
	@echo ""
	@echo -e "$(BLUE)üåê Web Interfaces:$(NC)"
	@echo "  pgAdmin:      http://localhost:5050"
	@echo "  Django:       http://localhost:8000"
	@echo "  Production:   https://localhost"
	@echo ""
	@echo -e "$(BLUE)üîó Database Connection:$(NC)"
	@echo "  Host:         localhost"
	@echo "  Port:         5432"
	@echo "  Database:     familyhub"
	@echo "  Username:     django"
	@echo "  Password:     secretpass"
	@echo "  URL:          postgresql://django:secretpass@localhost:5432/familyhub"
	@echo ""
	@echo -e "$(BLUE)üêò pgAdmin Access:$(NC)"
	@echo "  Email:        admin@familyhub.local"
	@echo "  Password:     admin123"
